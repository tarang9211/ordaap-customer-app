import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
import QRReader from 'react-qr-reader'
import TimeAgo from 'react-timeago'

import './qr-scanner.css'

const NOT_SET = ''
const ALLOWED = 'ALLOWED'
const DENIED = 'DENIED'
const NO_MEDIA_DEVICE = 'NO_MEDIA_DEVICE'

class QRScanner extends PureComponent {
  constructor(props) {
    super(props)
    this.state = {
      loaded: false,
      imageLoaded: false,
      scanError: false,
      scanSuccess: false,
      // Normally, we let QRReader component figure out if we have access to camera.
      // Only in the first time app opening, we purposely set it false to notify the
      // user that we need access to the camera (also checking if the browser has media device
      // otherwise it would'nt make sense to show a permission dialog and the browser not
      // support it)
      legacyMode: (this.hasMediaDevice() && props.cameraAccessStatus === NOT_SET)
        || this.props.lastOrderTime > 0
    }
  }

  componentWillMount = () => {
    if (this.hasMediaDevice() && this.props.cameraAccessStatus === NOT_SET) {
      this.handleCameraAccessStatus(this.props.cameraAccessStatus)
    }
  }

  componentDidUpdate = (prevProps, prevState) => {
    if (prevState.cameraAccessStatus !== this.state.cameraAccessStatus &&
      this.props.setCameraAccessStatus) {
      this.props.setCameraAccessStatus(this.state.cameraAccessStatus)
    }
  }

  onScan = (result) => {
    this.setState({ scanError: !result, scanSuccess: !!result })
    if (result) this.props.handleScan(result)
  }

  onError = (error) => {
    switch (error.name) {
    // these both are user generated errors
    case 'NotAllowedError':
      this.handleCameraAccessStatus(DENIED)
      break
    case 'PermissionDismissedError':
      this.handleCameraAccessStatus(NOT_SET)
      break
    // this is generated by the library
    case 'NoVideoInputDevicesError':
      this.handleCameraAccessStatus(NO_MEDIA_DEVICE)
      break
    // following errors: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
    case 'AbortError':
    case 'NotReadableError':
    case 'NotFoundError':
    case 'OverconstrainedError':
    case 'SecurityError':
    case 'TypeError':
      this.setState({ legacyMode: true })
      break
    // the above list is exhaustive errors generated while accessing/trying to access
    // the camera. If we land here, then it is when the QR can not be read.
    default:
      this.setState({ scanError: true })
      break
    }
    // Passing all errors upstream for recording
    if (this.props.handleCameraAccessError) {
      this.props.handleCameraAccessError(error)
    }
  }

  onLoad = () => {
    this.setState({ loaded: true })
    if (!this.state.legacyMode) { this.handleCameraAccessStatus(ALLOWED) }
  }

  onImageLoad = () => { this.setState({ imageLoaded: true }) }

  // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
  hasMediaDevice = () => {
    const mediaDevices = navigator.mediaDevices || {}
    if (mediaDevices != null && typeof mediaDevices.getUserMedia === 'function') return true
    if (typeof navigator.webkitGetUserMedia === 'function'
      && typeof navigator.mozGetUserMedia === 'function') return true
    return false
  }

  handleCameraAccessStatus = (status) => {
    if (status === NOT_SET || status === DENIED || status === NO_MEDIA_DEVICE) {
      this.setState({ legacyMode: true })
    }
    if (status === NOT_SET) {
      const notifyPermissionResult = (this.props.notifyPermission) ?
        this.props.notifyPermission() : Promise.resolve(true)
      notifyPermissionResult.then((didAccept) => {
        this.setState({ legacyMode: !didAccept })
      })
    }
    if (status === DENIED && this.props.notifyEnableAccess) {
      this.props.notifyEnableAccess()
    }
    this.setState({ cameraAccessStatus: status })
  }

  captureReaderRef = (reader) => { this.reader = reader }

  openImageDialog = () => { this.reader.openImageDialog() }

  renderFullPage = () => (
    <section className="qr-scanner">
      <div className={`container${this.state.imageLoaded ? ' with-image' : ''}`}>
        {
          !this.state.isCameraAccessModalActive && this.state.loaded &&
          this.props.lastOrderTime < 0 && (
            <h5 className="title is-5 has-text-centered instructions">
              {
                this.state.legacyMode && !this.state.scanSuccess ?
                  <span>Take a picture of the QR code on your table to start ordering</span>
                  :
                  <span>Scan the QR code on your<br /> table to start ordering</span>
              }
            </h5>
          )
        }
        <QRReader
          ref={this.captureReaderRef}
          className={`view-finder${this.state.imageLoaded ? ' with-image' : ''}`}
          onImageLoad={this.onImageLoad}
          delay={this.props.delay}
          onLoad={this.onLoad}
          onError={this.onError}
          onScan={this.onScan}
          legacyMode={this.state.legacyMode}
          facingMode="environment"
          showViewFinder={false}
          maxImageSize={1000}
        />
        {
          this.state.loaded && this.state.legacyMode &&
          !this.state.scanSuccess && this.props.lastOrderTime < 0 && (
            <button className="button is-primary rounded overlap" onClick={this.openImageDialog}>
              {this.state.scanError ? 'Try Again' : 'Snap a QR'}
            </button>
          )
        }
        {
          this.state.legacyMode && this.state.scanError && (
            <p className="has-text-danger is-size-7 has-text-centered error-text">
              We are unable to process this QR code
            </p>
          )
        }
        {
          this.props.hasRIDSet && this.props.continueOrder && (
            <div className="continue-order">
              <button className="button is-primary" onClick={this.props.continueOrder}>
                Continue ordering
              </button>
              {
                this.props.restaurantName &&
                <p className="has-text-centered">
                  at {this.props.restaurantName}
                </p>
              }
              {
                this.props.lastOrderTime > 0 ?
                  <p className="has-text-centered">
                    last order <TimeAgo date={this.props.lastOrderTime} minPeriod={120} />
                  </p>
                  : null
              }
            </div>
          )
        }
      </div>
    </section>
  )

  renderModal = () => (
    <div className="qr-scanner-modal modal is-active">
      <div
        className="modal-background"
        {...this.props.handleModalDismiss && { onClick: this.props.handleModalDismiss }}
      />
      <div className="modal-card">
        <section className="modal-card-body">
          {
            !this.state.isCameraAccessModalActive && this.state.loaded &&
            this.props.lastOrderTime < 0 && (
              <h5 className="title is-5 has-text-centered instructions">
                {
                  this.state.legacyMode && !this.state.scanSuccess ?
                    <span>
                      Take a picture of the QR code
                      on your table to send your order to the kitchen
                    </span>
                    :
                    <span>
                      Scan the QR code on your table to send your order to the kitchen
                    </span>
                }
              </h5>
            )
          }
          <div className={`container${this.state.imageLoaded ? ' with-image' : ''}`}>
            <QRReader
              ref={this.captureReaderRef}
              className={`view-finder${this.state.imageLoaded ? ' with-image' : ''}`}
              onImageLoad={this.onImageLoad}
              delay={this.props.delay}
              onLoad={this.onLoad}
              onError={this.onError}
              onScan={this.onScan}
              legacyMode={this.state.legacyMode}
              facingMode="environment"
              showViewFinder={false}
              maxImageSize={1000}
            />
            {
              this.state.loaded && this.state.legacyMode &&
              !this.state.scanSuccess && this.props.lastOrderTime < 0 && (
                <button className="button is-primary rounded overlap" onClick={this.openImageDialog}>
                  {this.state.scanError ? 'Try Again' : 'Snap a QR'}
                </button>
              )
            }
          </div>
          {
            this.state.legacyMode && this.state.scanError && (
              <p className="has-text-danger is-size-7 has-text-centered error-text">
                We are unable to process this QR code
              </p>
            )
          }
        </section>
      </div>
    </div>
  )

  render = () => (this.props.isModal ? this.renderModal() : this.renderFullPage())
}

QRScanner.propTypes = {
  delay: PropTypes.number,
  cameraAccessStatus: PropTypes.string,
  hasRIDSet: PropTypes.bool.isRequired,
  restaurantName: PropTypes.string,
  lastOrderTime: PropTypes.number,
  isModal: PropTypes.bool,
  handleScan: PropTypes.func.isRequired,
  handleCameraAccessError: PropTypes.func,
  setCameraAccessStatus: PropTypes.func,
  notifyPermission: PropTypes.func,
  notifyEnableAccess: PropTypes.func,
  continueOrder: PropTypes.func,
  handleModalDismiss: PropTypes.func
}

QRScanner.defaultProps = {
  delay: 100,
  cameraAccessStatus: NOT_SET,
  restaurantName: '',
  lastOrderTime: -1,
  isModal: false,
  handleCameraAccessError: null,
  setCameraAccessStatus: null,
  notifyPermission: null,
  notifyEnableAccess: null,
  continueOrder: null,
  handleModalDismiss: null
}

export default QRScanner
